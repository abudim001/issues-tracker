// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  //new
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Issue {
  id             String   @id @default(uuid()) // Changed to UUID
  title          String // Removed @db.VarChar(255)
  description    String // Removed @db.Text
  status         Status   @default(OPEN)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  assignToUserId String?  @db.VarChar(255) // Ensure this field is defined
  assingToUser   User?    @relation(fields: [assignToUserId], references: [id])
}

enum Status {
  OPEN
  CLOSED
  IN_PROGRESS
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? // Removed @db.Text
  access_token      String? // Removed @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // Removed @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  assignedIssue Issue[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
